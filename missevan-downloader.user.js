// ==UserScript==
// @updateURL    https://raw.githubusercontent.com/nengoz195/manbo-subtitle-image-downloader/refs/heads/main/manbo_subtitle_downloader_button.user.js
// @downloadURL  https://raw.githubusercontent.com/nengoz195/manbo-subtitle-image-downloader/refs/heads/main/manbo_subtitle_downloader_button.user.js
// @name         Manbo Media Downloader (Cute Pink Panel Edition - Optimized Images)
// @namespace    manbo.kilamanbo.media
// @version      3.2.1 // Chuy·ªÉn ƒë·ªïi ASS - kh√¥ng d√≤ng tr·ªëng + S·ª≠a l·ªói tr√πng t√™n t·ªáp ZIP
// @description  T·∫£i ph·ª• ƒë·ªÅ v√† ·∫£nh t·ª´ Manbo v·ªõi giao di·ªán cute h·ªìng, tr·ª±c quan v√† d·ªÖ s·ª≠ d·ª•ng! C√°c t√πy ch·ªçn t·∫£i xu·ªëng ƒë∆∞·ª£c ƒë·∫∑t trong m·ªôt b·∫£ng ƒëi·ªÅu khi·ªÉn n·ªïi. ·∫¢nh l·∫•y t·ª´ API (setPic) v√† c√°c ph·∫ßn t·ª≠ DOM c·ª• th·ªÉ.
// @author       Thien Truong Dia Cuu
// @match        https://kilamanbo.com/manbo/pc/detail*
// @match        https://manbo.kilakila.cn/manbo/pc/detail*
// @match        https://manbo.hongdoulive.com/Activecard/radioplay*
// @match        https://kilamanbo.com/*
// @match        https://www.kilamanbo.com/*
// @require      https://greasyfork.org/scripts/455943-ajaxhooker/code/ajaxHooker.js?version=1124435
// @require      https://cdn.jsdelivr.net/npm/@zip.js/zip.js/dist/zip-full.min.js
// @require      https://unpkg.com/sweetalert2@11.6.15/dist/sweetalert2.min.js
// @resource     swalStyle https://unpkg.com/sweetalert2@11.7.2/dist/sweetalert2.min.css
// @require      https://unpkg.com/layui@2.7.6/dist/layui.js
// @resource     layuiStyle https://unpkg.com/layui@2.7.6/dist/css/layui.css
// @icon         https://img.hongrenshuo.com.cn/h5/websiteManbo-pc-favicon-cb.ico
// @grant        GM_getResourceText
// @grant        GM_addStyle
// @grant        GM_setClipboard
// @grant        GM_xmlhttpRequest
// @run-at       document-start
// @connect      img.kilamanbo.com
// @license      MIT
// ==/UserScript==

(function () {
    'use strict';

    let isDownloading = false;
    let subtitleData = []; // ƒê·ªÉ l∆∞u th√¥ng tin ph·ª• ƒë·ªÅ: [ti√™u ƒë·ªÅ, lrcUrl, setIdStr] cho T·∫§T C·∫¢ c√°c t·∫≠p
    let currentEpisodeLrcUrl = null; // ƒê·ªÉ l∆∞u URL LRC c·ªßa t·∫≠p ƒëang xem
    let imageData = [];    // ƒê·ªÉ l∆∞u c√°c URL ·∫£nh (t·ª´ trang hi·ªán t·∫°i API/DOM)
    let allDramaImageData = []; // ƒê·ªÉ l∆∞u T·∫§T C·∫¢ ·∫£nh t·ª´ T·∫§T C·∫¢ c√°c t·∫≠p (t·ª´ setPic)
    let currentDramaTitle = 'Manbo';
    let currentEpisodeTitle = 'T·∫≠p hi·ªán t·∫°i'; // Ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh cho t·∫≠p hi·ªán t·∫°i

    // --- C√°c ki·ªÉu t√πy ch·ªânh cho Phi√™n b·∫£n B·∫£ng ƒëi·ªÅu khi·ªÉn m√†u h·ªìng d·ªÖ th∆∞∆°ng ---
    GM_addStyle(`
        /* V√πng ch·ª©a b·∫£ng ƒëi·ªÅu khi·ªÉn ch√≠nh */
        #manbo-downloader-panel {
            position: fixed;
            top: 20%;
            right: 20px;
            width: 280px; /* Chi·ªÅu r·ªông ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh ƒë·ªÉ v·ª´a v·∫∑n h∆°n */
            background: linear-gradient(135deg, #ffe0ee, #fff0f6); /* Gradient h·ªìng nh·∫°t */
            border-radius: 15px;
            box-shadow: 0 8px 20px rgba(255, 126, 185, 0.4);
            z-index: 9999;
            font-family: 'Quicksand', sans-serif, 'Comic Sans MS';
            padding: 15px;
            box-sizing: border-box; /* Bao g·ªìm ph·∫ßn ƒë·ªám trong chi·ªÅu r·ªông */
            border: 1px solid #ffb3d9; /* Vi·ªÅn tinh t·∫ø */
            max-height: 90vh; /* Gi·ªõi h·∫°n chi·ªÅu cao t·ªïng th·ªÉ c·ªßa panel theo viewport height */
            overflow: hidden; /* ·∫®n tr√†n t·ªïng th·ªÉ n·∫øu n·ªôi dung v·∫´n qu√° d√†i */
            display: flex; /* D√πng flexbox ƒë·ªÉ footer d√≠nh d∆∞·ªõi c√πng */
            flex-direction: column;
            transition: all 0.3s ease-in-out; /* Th√™m transition cho panel */
        }

        /* Khi panel b·ªã ·∫©n ho√†n to√†n */
        #manbo-downloader-panel.collapsed {
            right: -300px; /* ƒê·∫©y ra ngo√†i m√†n h√¨nh */
            opacity: 0;
            pointer-events: none; /* V√¥ hi·ªáu h√≥a t∆∞∆°ng t√°c khi ·∫©n */
        }


        /* Ti√™u ƒë·ªÅ b·∫£ng ƒëi·ªÅu khi·ªÉn */
        #manbo-downloader-panel .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px dashed #ffb3d9; /* ƒê∆∞·ªùng g·∫°ch ngang */
            flex-shrink: 0; /* Kh√¥ng cho header co l·∫°i */
        }
        #manbo-downloader-panel .panel-title {
            color: #ff4d94;
            font-size: 1.2em;
            font-weight: bold;
            display: flex;
            align-items: center;
        }
        #manbo-downloader-panel .panel-title span {
            margin-right: 8px;
            font-size: 1.5em; /* Bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c l·ªõn h∆°n */
        }
        #manbo-downloader-panel .toggle-button {
            background: none;
            border: none;
            color: #ff4d94;
            font-size: 1.5em;
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        #manbo-downloader-panel .toggle-button.collapsed {
            transform: rotate(-90deg);
        }

        /* Th√¢n b·∫£ng ƒëi·ªÅu khi·ªÉn (c√≥ th·ªÉ thu g·ªçn n·ªôi dung) */
        #manbo-downloader-panel .panel-body {
            /* max-height ƒë∆∞·ª£c t√≠nh to√°n b·∫±ng JS */
            overflow-y: auto; /* Cu·ªôn n·∫øu n·ªôi dung tr√†n */
            transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
            opacity: 1;
            flex-grow: 1; /* Cho ph√©p body m·ªü r·ªông v√† chi·∫øm kh√¥ng gian c√≤n l·∫°i */
        }
        #manbo-downloader-panel .panel-body.collapsed { /* C·∫≠p nh·∫≠t: Ch·ªâ √°p d·ª•ng cho .panel-body */
            max-height: 0 !important;
            opacity: 0;
            overflow: hidden;
        }

        /* Ti√™u ƒë·ªÅ ph·∫ßn */
        .panel-section-title {
            color: #d63384;
            font-weight: bold;
            margin-top: 15px;
            margin-bottom: 10px;
            font-size: 1.1em;
            display: flex;
            align-items: center;
        }
        .panel-section-title i {
            margin-right: 8px;
            font-size: 1.2em;
        }


        /* N√∫t t·∫£i xu·ªëng */
        .download-option-btn {
            display: flex;
            align-items: center;
            width: 100%;
            padding: 10px 15px;
            margin-bottom: 8px;
            background: linear-gradient(135deg, #ffcce5, #ffaad5); /* H·ªìng nh·∫°t h∆°n cho c√°c t√πy ch·ªçn */
            color: #8c004d; /* VƒÉn b·∫£n m√†u h·ªìng ƒë·∫≠m h∆°n */
            font-weight: bold;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(255, 126, 185, 0.2);
            transition: all 0.2s ease;
            text-align: left;
            box-sizing: border-box;
        }
        .download-option-btn:hover {
            background: linear-gradient(135deg, #ffaad5, #ff8dc4);
            box-shadow: 0 4px 8px rgba(255, 126, 185, 0.3);
            transform: translateY(-2px);
        }
        .download-option-btn i {
            margin-right: 10px;
            font-size: 1.2em; /* K√≠ch th∆∞·ªõc bi·ªÉu t∆∞·ª£ng */
            color: #ff4d94; /* M√†u bi·ªÉu t∆∞·ª£ng */
        }
        /* Ki·ªÉu bi·ªÉu t∆∞·ª£ng (s·ª≠ d·ª•ng k√Ω t·ª± unicode cho ƒë∆°n gi·∫£n, c√≥ th·ªÉ s·ª≠ d·ª•ng h√¨nh ·∫£nh/svg th·ª±c t·∫ø n·∫øu mu·ªën) */
        .icon-lrc:before { content: 'üí¨'; }
        .icon-json-srt:before { content: 'üìÑ'; }
        .icon-ass:before { content: 'üìù'; }
        .icon-audio:before { content: 'üéß'; }
        .icon-cover:before { content: 'üñºÔ∏è'; }
        .icon-all-images:before { content: 'üéÄ'; }
        .icon-single-image:before { content: 'üì∏'; }

        /* N√∫t ·∫©n hi·ªán ch√≠nh */
        #manbo-downloader-toggle-main-button {
            position: fixed;
            bottom: 20px; /* V·ªã tr√≠ d∆∞·ªõi c√πng */
            right: 20px; /* V·ªã tr√≠ b√™n ph·∫£i */
            width: 40px; /* Nh·ªè h∆°n m·ªôt ch√∫t */
            height: 40px; /* Nh·ªè h∆°n m·ªôt ch√∫t */
            background: linear-gradient(135deg, #ff7eb9, #ff4d94); /* M√†u h·ªìng ƒë·∫≠m */
            color: white;
            border: none;
            border-radius: 50%; /* H√¨nh tr√≤n */
            box-shadow: 0 4px 12px rgba(255, 77, 148, 0.4); /* B√≥ng nh·ªè h∆°n m·ªôt ch√∫t */
            font-size: 1.5em; /* K√≠ch th∆∞·ªõc bi·ªÉu t∆∞·ª£ng nh·ªè h∆°n */
            font-weight: bold;
            cursor: pointer;
            z-index: 10000; /* ƒê·∫£m b·∫£o n·ªïi tr√™n m·ªçi th·ª© */
            display: flex;
            justify-content: center;
            align-items: center;
            transition: all 0.2s ease;
        }
        #manbo-downloader-toggle-main-button:hover {
            background: linear-gradient(135deg, #ff4d94, #d63384);
            transform: scale(1.08); /* Ph√≥ng to nh·∫π h∆°n khi hover */
        }
        /* Ki·ªÉu SweetAlert2 (ch·ªß ƒë·ªÅ m√†u h·ªìng nh·∫•t qu√°n) */
        .swal2-popup {
            border-radius: 20px !important;
            background: #fff0f6 !important; /* N·ªÅn h·ªìng nh·∫°t */
            font-family: 'Quicksand', sans-serif, 'Arial' !important;
        }
        .swal2-title {
            color: #ff4d94 !important; /* H·ªìng ƒë·∫≠m h∆°n cho ti√™u ƒë·ªÅ */
            font-weight: bold !important;
        }
        .swal2-content {
            color: #d63384 !important; /* H·ªìng v·ª´a cho n·ªôi dung */
        }
        .swal2-styled.swal2-confirm {
            background-color: #ff7eb9 !important; /* H·ªìng n√∫t ch√≠nh */
            border-radius: 20px !important;
            font-weight: bold !important;
            color: white !important;
        }
        .swal2-styled.swal2-deny {
            background-color: #ffb3d9 !important; /* H·ªìng n√∫t ph·ª• */
            border-radius: 20px !important;
            font-weight: bold !important;
            color: white !important;
        }
        .swal2-styled.swal2-cancel {
            background-color: #ffe0ee !important; /* H·ªìng nh·∫°t nh·∫•t cho h·ªßy */
            border-radius: 20px !important;
            font-weight: bold !important;
            color: #d63384 !important;
        }
        .swal2-progress-bar {
            background-color: #ff7eb9 !important; /* Thanh ti·∫øn tr√¨nh m√†u h·ªìng */
        }
        .swal2-timer-progress-bar {
            background-color: #ff7eb9 !important; /* Thanh th·ªùi gian m√†u h·ªìng */
        }
        /* V√¥ hi·ªáu h√≥a ch·ªçn vƒÉn b·∫£n tr√™n toast */
        .disableSelection {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }
    `);

    // T·∫£i t√†i nguy√™n CSS b√™n ngo√†i
    GM_addStyle(GM_getResourceText('swalStyle'));
    GM_addStyle(GM_getResourceText('layuiStyle'));

    // --- SweetAlert2 Mixin cho Toasts ---
    const toast = Swal.mixin({
        toast: true,
        position: 'top',
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer);
            toast.addEventListener('mouseleave', Swal.resumeTimer);
        },
        customClass: { container: 'disableSelection' }
    });

    // --- H√†m ti·ªán √≠ch ---

    /**
     * Theo d√µi ti·∫øn ƒë·ªô c·ªßa nhi·ªÅu Promise.
     * @param {Promise[]} proms - M·∫£ng c√°c Promise.
     * @param {(progress: number) => void} progress_cb - Callback cho c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô (0-100).
     */
    function allProgress(proms, progress_cb) {
        let done = 0;
        progress_cb(0);
        return Promise.all(proms.map(p => p.then(() => {
            done++;
            progress_cb((done * 100) / proms.length);
        })));
    }

    /**
     * L·∫•y t·ªáp b·∫±ng GM_xmlhttpRequest.
     * @param {string} url - URL c·ªßa t·ªáp.
     * @param {string} [responseType='blob'] - Lo·∫°i ph·∫£n h·ªìi mong mu·ªën.
     * @returns {Promise<Blob|string>} M·ªôt Promise gi·∫£i quy·∫øt v·ªõi ph·∫£n h·ªìi.
     */
    const fetchFile = (url, responseType = 'blob') => new Promise((resolve, reject) => {
        if (!url) {
            return reject(new Error("Li√™n k·∫øt b·ªã l·ªói, vui l√≤ng li√™n h·ªá v·ªõi t√°c gi·∫£."));
        }
        GM_xmlhttpRequest({
            method: "GET",
            url: url,
            onload: resp => {
                if (resp.status === 200) {
                    resolve(resp.response);
                } else {
                    reject(new Error(`L·ªói t·∫£i t·ªáp: ${resp.status} ${resp.statusText}`));
                }
            },
            onerror: () => reject(new Error("Y√™u c·∫ßu m·∫°ng th·∫•t b·∫°i.")),
            responseType: responseType
        });
    });

    /**
     * B·∫Øt ƒë·∫ßu t·∫£i t·ªáp trong tr√¨nh duy·ªát.
     * @param {Blob|string} data - Blob ho·∫∑c URL c·ªßa t·ªáp ƒë·ªÉ t·∫£i xu·ªëng.
     * @param {string} fileName - T√™n t·ªáp mong mu·ªën.
     */
    const downloadFile = (data, fileName) => {
        const a = document.createElement("a");
        a.download = fileName;
        a.href = typeof data === "string" ? data : URL.createObjectURL(data);
        a.style.display = "none";
        document.body.appendChild(a);
        a.click();
        a.remove();
        if (typeof data !== "string") {
            URL.revokeObjectURL(a.href); // D·ªçn d·∫πp URL Blob
        }
        isDownloading = false;
    };

    /**
     * L√†m s·∫°ch m·ªôt chu·ªói ƒë·ªÉ s·ª≠ d·ª•ng l√†m t√™n t·ªáp b·∫±ng c√°ch lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng h·ª£p l·ªá.
     * @param {string} name - Chu·ªói g·ªëc.
     * @returns {string} Chu·ªói ƒë√£ l√†m s·∫°ch.
     */
    const sanitizeFilename = (name) => {
        // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng h·ª£p l·ªá cho t√™n t·ªáp: / \ ? % * : | " < >
        return name.replace(/[\/\\?%*:|"<>]/g, '_')
                   .replace(/\s+/g, ' ') // Thay th·∫ø nhi·ªÅu kho·∫£ng tr·∫Øng b·∫±ng m·ªôt kho·∫£ng tr·∫Øng
                   .trim(); // C·∫Øt b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi
    };

    /**
     * Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n ph·ª• ƒë·ªÅ ƒë·ªãnh d·∫°ng LRC sang ƒë·ªãnh d·∫°ng ASS (Advanced SubStation Alpha).
     * ƒê√¢y l√† m·ªôt chuy·ªÉn ƒë·ªïi c∆° b·∫£n, ch·ªâ x·ª≠ l√Ω d·∫•u th·ªùi gian v√† vƒÉn b·∫£n.
     * @param {string} lrcText - N·ªôi dung ph·ª• ƒë·ªÅ LRC.
     * @returns {string} N·ªôi dung ph·ª• ƒë·ªÅ ASS.
     */
    function convertLrcToAss(lrcText) {
        let assContent = `[Script Info]
; Script ƒë∆∞·ª£c t·∫°o b·ªüi Manbo Media Downloader
Title: Chuy·ªÉn ƒë·ªïi t·ª´ LRC
ScriptType: v4.00+
Collisions: Normal
PlayResX: 1280
PlayResY: 720
Timer: 100.0000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,48,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,0,2,20,20,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
`;

        const parsedLines = [];
        lrcText.split('\n').forEach(line => {
            // Regex ƒë·ªÉ b·∫Øt d·∫•u th·ªùi gian v√† ph·∫ßn vƒÉn b·∫£n c√≤n l·∫°i.
            const match = line.match(/^\[(\d{2}):(\d{2})\.(\d{2,3})\](.*)/);
            if (match) {
                const minutes = parseInt(match[1]);
                const seconds = parseInt(match[2]);
                const milliseconds = parseInt(match[3]) * (match[3].length === 2 ? 10 : 1);
                const text = match[4].trim(); // L·∫•y ph·∫ßn vƒÉn b·∫£n v√† c·∫Øt b·ªè kho·∫£ng tr·∫Øng

                // Ch·ªâ th√™m v√†o n·∫øu c√≥ vƒÉn b·∫£n th·ª±c s·ª± sau d·∫•u th·ªùi gian
                if (text.length > 0) {
                    parsedLines.push({
                        time: minutes * 60000 + seconds * 1000 + milliseconds, // T·ªïng s·ªë mili gi√¢y
                        text: text
                    });
                }
            }
        });

        // S·∫Øp x·∫øp c√°c d√≤ng theo th·ªùi gian ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± th·ªùi gian ch√≠nh x√°c
        parsedLines.sort((a, b) => a.time - b.time);

        // H√†m ƒë·ªãnh d·∫°ng mili gi√¢y sang ƒë·ªãnh d·∫°ng th·ªùi gian ASS H:MM:SS.CC
        const formatAssTime = (ms) => {
            const h = Math.floor(ms / 3600000);
            const m = Math.floor((ms % 3600000) / 60000);
            const s = Math.floor((ms % 60000) / 1000);
            const cs = Math.floor((ms % 1000) / 10); // Centiseconds

            return `${h}:${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}.${String(cs).padStart(2, '0')}`;
        };

        for (let i = 0; i < parsedLines.length; i++) {
            const current = parsedLines[i];
            const next = parsedLines[i + 1];

            const startTime = current.time;
            let endTime;

            if (next) {
                // ƒê·∫∑t th·ªùi gian k·∫øt th√∫c l√† 1 mili gi√¢y tr∆∞·ªõc khi d√≤ng ti·∫øp theo b·∫Øt ƒë·∫ßu
                endTime = next.time - 1;
                // ƒê·∫£m b·∫£o th·ªùi gian k·∫øt th√∫c kh√¥ng nh·ªè h∆°n th·ªùi gian b·∫Øt ƒë·∫ßu
                if (endTime < startTime) {
                    endTime = startTime; // N·∫øu d√≤ng ti·∫øp theo b·∫Øt ƒë·∫ßu ngay l·∫≠p t·ª©c ho·∫∑c tr∆∞·ªõc ƒë√≥, k·∫øt th√∫c t·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
                }
            } else {
                // N·∫øu l√† d√≤ng cu·ªëi c√πng, cho n√≥ m·ªôt kho·∫£ng th·ªùi gian m·∫∑c ƒë·ªãnh (v√≠ d·ª•: 5 gi√¢y)
                endTime = startTime + 5000;
            }

            const assStartTime = formatAssTime(startTime);
            const assEndTime = formatAssTime(endTime);

            // Tho√°t c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c·ªßa ASS nh∆∞ '{', '}', v√† '\'
            const escapedText = current.text.replace(/\\/g, '\\\\').replace(/{/g, '\\{').replace(/}/g, '\\}');

            // Ch·ªâ th√™m d√≤ng n·∫øu c√≥ n·ªôi dung vƒÉn b·∫£n th·ª±c t·∫ø ƒë·ªÉ tr√°nh c√°c s·ª± ki·ªán ph·ª• ƒë·ªÅ th·ª±c s·ª± tr·ªëng
            if (escapedText.length > 0) {
                 assContent += `Dialogue: 0,${assStartTime},${assEndTime},Default,,0,0,0,,${escapedText}\n`;
            }
        }

        return assContent;
    }


    // --- Logic t·∫£i ph·ª• ƒë·ªÅ ---

    /**
     * B·∫Øt ƒë·∫ßu qu√° tr√¨nh n√©n v√† t·∫£i xu·ªëng ph·ª• ƒë·ªÅ.
     * @param {Array<Array<string>>} lists - M·∫£ng [ti√™u ƒë·ªÅ, lrcUrl, setIdStr] cho ph·ª• ƒë·ªÅ.
     * @param {string} dramaTitle - Ti√™u ƒë·ªÅ c·ªßa drama √¢m thanh.
     * @param {string} targetFormat - 'lrc' ho·∫∑c 'ass'.
     */
    const startZipSubtitles = async (lists, dramaTitle, targetFormat) => {
        if (isDownloading) {
            return toast.fire({ title: 'ƒêang t·∫£i v·ªÅ, vui l√≤ng ch·ªù...', icon: 'warning' });
        }
        isDownloading = true;
        const subtitlesToDownload = lists.filter(a => a[1]); // L·ªçc c√°c m·ª•c kh√¥ng c√≥ URL
        if (subtitlesToDownload.length === 0) {
            toast.fire({ title: 'T·∫°m th·ªùi kh√¥ng c√≥ file ph·ª• ƒë·ªÅ ƒë·ªÉ t·∫£i.', icon: 'error' });
            isDownloading = false;
            return;
        }

        const zipWriter = new zip.ZipWriter(new zip.BlobWriter("application/zip"));
        toast.fire({ title: `ƒêang chu·∫©n b·ªã ph·ª• ƒë·ªÅ ${targetFormat.toUpperCase()}...`, icon: 'info' });

        try {
            const subtitleFetchPromises = subtitlesToDownload.map(s => fetchFile(s[1], 'text'));
            const subtitleTexts = await Promise.all(subtitleFetchPromises).catch(e => {
                throw new Error(`L·ªói t·∫£i ph·ª• ƒë·ªÅ: ${e.message}`);
            });

            const processedSubtitles = [];
            const filenameSet = new Set(); // D√πng ƒë·ªÉ theo d√µi t√™n t·ªáp ƒë√£ s·ª≠ d·ª•ng

            subtitleTexts.forEach((text, i) => {
                const originalTitle = subtitlesToDownload[i][0];
                const setId = subtitlesToDownload[i][2]; // L·∫•y setIdStr
                const originalUrl = subtitlesToDownload[i][1];

                let processedText = text;
                if (targetFormat === 'ass') {
                    processedText = convertLrcToAss(text);
                }

                // T·∫°o t√™n t·ªáp duy nh·∫•t b·∫±ng c√°ch k·∫øt h·ª£p t√™n ƒë√£ l√†m s·∫°ch v√† setId
                // V√≠ d·ª•: "TenTap_setId.lrc" ho·∫∑c "TenTap_setId.ass"
                let baseFilename = sanitizeFilename(originalTitle);
                let uniqueFilename = `${baseFilename}_${setId}.${targetFormat}`;

                // N·∫øu t√™n t·ªáp ƒë√£ t·ªìn t·∫°i (m·∫∑c d√π ƒë√£ th√™m setId, v·∫´n c√≥ th·ªÉ x·∫£y ra n·∫øu setIdStr c√≥ tr√πng l·∫∑p ho·∫∑c r·∫•t ng·∫Øn),
                // th√™m m·ªôt h·∫≠u t·ªë s·ªë. M·∫∑c d√π kh·∫£ nƒÉng n√†y th·∫•p v·ªõi setIdStr, nh∆∞ng t·ªët h∆°n l√† c√≥.
                let counter = 1;
                let finalFilename = uniqueFilename;
                while (filenameSet.has(finalFilename)) {
                    finalFilename = `${baseFilename}_${setId}_${counter}.${targetFormat}`;
                    counter++;
                }
                filenameSet.add(finalFilename);

                processedSubtitles.push({
                    title: originalTitle, // T√™n g·ªëc ƒë·ªÉ hi·ªÉn th·ªã
                    url: originalUrl,
                    content: processedText,
                    format: targetFormat,
                    filenameInZip: finalFilename // T√™n t·ªáp s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ZIP
                });
            });

            // T·∫°o n·ªôi dung CSV
            const CSVContent = "\ufeffÊñá‰ª∂Âêç,t·∫£i xu·ªëng li√™n k·∫øt\n" +
                               processedSubtitles.map(s => `${s.filenameInZip},${s.url}`).join("\n") + // S·ª≠ d·ª•ng filenameInZip
                               `\n\n(C) ChatGPT Script by Ne\nƒê√≥ng g√≥i th·ªùi gianÔºö${new Date().toISOString()}`;
            const CSVBlob = new zip.TextReader(CSVContent);

            // Th√™m t·ªáp v√†o zip
            const addPromises = [
                zipWriter.add("filelist.csv", CSVBlob),
                ...processedSubtitles.map(s =>
                    zipWriter.add(s.filenameInZip, new zip.TextReader(s.content)) // S·ª≠ d·ª•ng filenameInZip
                )
            ];

            // Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh cho qu√° tr√¨nh n√©n
            const swalProgressBar = Swal.fire({
                title: `ƒêang ƒë√≥ng g√≥i ph·ª• ƒë·ªÅ ${targetFormat.toUpperCase()}...`,
                html: `0% ho√†n th√†nh<br><progress id="swal-zip-progress-subtitle" max="100" value="0"></progress>`,
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });

            await allProgress(addPromises, p => {
                const progressBar = document.getElementById('swal-zip-progress-subtitle');
                if (progressBar) {
                    progressBar.value = p;
                    Swal.update({
                        html: `${p.toFixed(2)}% ho√†n th√†nh<br><progress id="swal-zip-progress-subtitle" max="100" value="${p}"></progress>`
                    });
                }
            }).catch(e => {
                throw new Error(`L·ªói khi th√™m t·ªáp ph·ª• ƒë·ªÅ v√†o ZIP: ${e.message}`);
            });
            swalProgressBar.then(() => Swal.close()); // ƒê√≥ng thanh ti·∫øn tr√¨nh

            downloadFile(await zipWriter.close(), `Manbo_Subtitles_${sanitizeFilename(dramaTitle)}_${targetFormat.toUpperCase()}.zip`);
            toast.fire({ title: `T·∫£i ph·ª• ƒë·ªÅ ${targetFormat.toUpperCase()} ho√†n t·∫•t!`, icon: 'success' });

        } catch (e) {
            toast.fire({ title: `L·ªói khi ƒë√≥ng g√≥i ph·ª• ƒë·ªÅ ${targetFormat.toUpperCase()}.`, icon: 'error', text: e.message });
            isDownloading = false;
        }
    };


    // --- Logic t·∫£i ·∫£nh (API setPic & DOM c·ª• th·ªÉ) ---

    /**
     * Tr√≠ch xu·∫•t URL ·∫£nh t·ª´ c√°c ph·∫ßn t·ª≠ DOM c·ª• th·ªÉ.
     * @returns {string[]} M·ªôt m·∫£ng c√°c URL ·∫£nh t√¨m th·∫•y trong c√°c ph·∫ßn t·ª≠ DOM ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.
     */
    function getImagesFromSpecificDOM() {
        const urls = new Set(); // S·ª≠ d·ª•ng Set ƒë·ªÉ t·ª± ƒë·ªông x·ª≠ l√Ω tr√πng l·∫∑p

        // 1. L·∫•y t·ª´ background-image c·ªßa div.filter-bg-image
        document.querySelectorAll('div.filter-bg-image').forEach(div => {
            const style = div.style.backgroundImage;
            if (style) {
                const match = style.match(/url\(['"]?(.*?)['"]?\)/);
                if (match && match[1]) {
                    urls.add(match[1].replace(/\?.*/, '')); // Th√™m v√† lo·∫°i b·ªè c√°c tham s·ªë truy v·∫•n
                }
            }
        });

        // 2. L·∫•y t·ª´ src c·ªßa img.bgimg
        document.querySelectorAll('img.bgimg').forEach(img => {
            if (img.src) {
                urls.add(img.src.replace(/\?.*/, '')); // Th√™m v√† lo·∫°i b·ªè c√°c tham s·ªë truy v·∫•n
            }
        });

        // L·ªçc ƒë·ªÉ ƒë·∫£m b·∫£o ch√∫ng t·ª´ kilamanbo.com n·∫øu c·∫ßn, m·∫∑c d√π c√°c l·ªõp c·ª• th·ªÉ ƒë√£ thu h·∫πp n√≥
        return Array.from(urls).filter(url => url.includes('img.kilamanbo.com'));
    }

    /**
     * C·∫≠p nh·∫≠t `imageData` to√†n c·∫ßu cho t·∫≠p hi·ªán t·∫°i.
     * Phi√™n b·∫£n n√†y k·∫øt h·ª£p c√°c URL API m·ªõi (t·ª´ chi ti·∫øt t·∫≠p hi·ªán t·∫°i) v√† c√°c URL DOM m·ªõi ƒë∆∞·ª£c c·∫°o.
     * @param {string[]} [newApiUrlsFromCurrentEpisode=[]] - C√°c URL ·∫£nh m·ªõi ƒë·ªÉ th√™m t·ª´ API cho t·∫≠p hi·ªán t·∫°i.
     */
    function updateCurrentEpisodeImageList(newApiUrlsFromCurrentEpisode = []) {
        const domUrls = getImagesFromSpecificDOM();
        // K·∫øt h·ª£p c√°c URL m·ªõi t·ª´ API v·ªõi c√°c URL DOM hi·ªán c√≥, lo·∫°i b·ªè tr√πng l·∫∑p
        imageData = [...new Set([...imageData, ...newApiUrlsFromCurrentEpisode, ...domUrls])];
        console.log("Danh s√°ch ·∫£nh t·∫≠p hi·ªán t·∫°i (API & DOM c·ª• th·ªÉ):", imageData);
    }

    /**
     * B·∫Øt ƒë·∫ßu qu√° tr√¨nh n√©n v√† t·∫£i xu·ªëng ·∫£nh.
     * @param {string[]} list - M·∫£ng c√°c URL ·∫£nh.
     * @param {string} fileNamePrefix - Ti·ªÅn t·ªë cho t√™n t·ªáp zip.
     */
    const startZipImages = async (list, fileNamePrefix) => {
        if (isDownloading) {
            return toast.fire({ title: 'ƒêang t·∫£i v·ªÅ, vui l√≤ng ch·ªù...', icon: 'warning' });
        }
        isDownloading = true;

        if (list.length === 0) {
            toast.fire({ title: 'Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·ªÉ t·∫£i.', icon: 'error' });
            isDownloading = false;
            return;
        }

        const zipWriter = new zip.ZipWriter(new zip.BlobWriter("application/zip"));
        toast.fire({ title: 'ƒêang ƒë√≥ng g√≥i ·∫£nh...', icon: 'info' });

        try {
            const imageBlobs = await Promise.all(list.map(url => fetchFile(url, 'blob'))).catch(e => {
                throw new Error(`L·ªói t·∫£i ·∫£nh: ${e.message}`);
            });

            // S·ª≠ d·ª•ng Set ƒë·ªÉ ƒë·∫£m b·∫£o t√™n t·ªáp duy nh·∫•t trong ZIP
            const addedFilenames = new Set();
            const addPromises = [];

            list.forEach((url, i) => {
                const parts = url.split('/');
                const originalFilename = parts[parts.length - 1].split('?')[0]; // L·∫•y t√™n t·ªáp v√† lo·∫°i b·ªè c√°c tham s·ªë truy v·∫•n
                let filename = originalFilename;
                let counter = 1;

                // T·∫°o t√™n t·ªáp duy nh·∫•t n·∫øu t√™n g·ªëc ƒë√£ t·ªìn t·∫°i
                while (addedFilenames.has(filename)) {
                    const extIndex = originalFilename.lastIndexOf('.');
                    if (extIndex > -1) {
                        filename = `${originalFilename.substring(0, extIndex)}_${counter}${originalFilename.substring(extIndex)}`;
                    } else {
                        filename = `${originalFilename}_${counter}`;
                    }
                    counter++;
                }
                addedFilenames.add(filename);
                addPromises.push(zipWriter.add(filename, new zip.BlobReader(imageBlobs[i])));
            });

            const swalProgressBar = Swal.fire({
                title: 'ƒêang ƒë√≥ng g√≥i ·∫£nh...',
                html: `0% ho√†n th√†nh<br><progress id="swal-zip-progress" max="100" value="0"></progress>`,
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                }
            });

            await allProgress(addPromises, p => {
                const progressBar = document.getElementById('swal-zip-progress');
                if (progressBar) {
                    progressBar.value = p;
                    Swal.update({
                        html: `${p.toFixed(2)}% ho√†n th√†nh<br><progress id="swal-zip-progress" max="100" value="${p}"></progress>`
                    });
                }
            }).catch(e => {
                throw new Error(`L·ªói khi th√™m t·ªáp v√†o ZIP: ${e.message}`);
            });
            swalProgressBar.then(() => Swal.close()); // ƒê√≥ng thanh ti·∫øn tr√¨nh

            downloadFile(await zipWriter.close(), `${sanitizeFilename(fileNamePrefix)}_Images.zip`);
            toast.fire({ title: 'T·∫£i ·∫£nh ho√†n t·∫•t!', icon: 'success' });

        } catch (e) {
            toast.fire({ title: 'L·ªói khi ƒë√≥ng g√≥i ho·∫∑c t·∫£i ·∫£nh.', icon: 'error', text: e.message });
            isDownloading = false;
        }
    };

    // --- T·∫°o b·∫£ng ƒëi·ªÅu khi·ªÉn UI ---

    let panelBodyElement = null; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ ph·∫ßn t·ª≠ panel-body

    /**
     * ƒêi·ªÅu ch·ªânh chi·ªÅu cao t·ªëi ƒëa c·ªßa panel-body d·ª±a tr√™n chi·ªÅu cao c·ª≠a s·ªï.
     */
    function adjustPanelHeight() {
        if (!panelBodyElement) return;

        // L·∫•y tham chi·∫øu ƒë·∫øn panel ch√≠nh v√† header
        const panel = document.getElementById('manbo-downloader-panel');
        const header = panel.querySelector('.panel-header');

        if (!panel || !header) return;

        // T√≠nh to√°n kho·∫£ng tr·ªëng c√≤n l·∫°i cho body
        // 20px * 2 l√† top/bottom: 20% + 20px (panel top) + 20px (panel bottom)
        const panelVerticalPadding = 30; // 15px top + 15px bottom padding c·ªßa panel
        const headerHeight = header.offsetHeight;
        const panelTopOffset = panel.offsetTop;
        const windowHeight = window.innerHeight;

        // Chi·ªÅu cao t·ªëi ƒëa kh·∫£ d·ª•ng cho to√†n b·ªô panel, tr·ª´ ƒëi m·ªôt bi√™n an to√†n (v√≠ d·ª•: 20px)
        const availableHeightForPanel = windowHeight - panelTopOffset - 20;

        // Chi·ªÅu cao t·ªëi ƒëa cho panelBodyElement
        // L·∫•y chi·ªÅu cao t·ªëi ƒëa c·ªßa panel, tr·ª´ ƒëi chi·ªÅu cao header v√† padding
        const maxBodyHeight = availableHeightForPanel - headerHeight - panelVerticalPadding;

        panelBodyElement.style.maxHeight = `${Math.max(100, maxBodyHeight)}px`; // ƒê·∫£m b·∫£o t·ªëi thi·ªÉu 100px
    }

    /**
     * T·∫°o v√† th√™m b·∫£ng ƒëi·ªÅu khi·ªÉn t·∫£i xu·ªëng ch√≠nh v√†o trang.
     */
    function createDownloaderPanel() {
        if (document.getElementById('manbo-downloader-panel')) {
            return; // B·∫£ng ƒëi·ªÅu khi·ªÉn ƒë√£ t·ªìn t·∫°i
        }

        const panel = document.createElement('div');
        panel.id = 'manbo-downloader-panel';
        document.body.appendChild(panel); // Th√™m panel tr∆∞·ªõc ƒë·ªÉ n√≥ c√≥ th·ªÉ ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn

        // Ti√™u ƒë·ªÅ b·∫£ng ƒëi·ªÅu khi·ªÉn
        const panelHeader = document.createElement('div');
        panelHeader.classList.add('panel-header');
        panel.appendChild(panelHeader);

        const panelTitle = document.createElement('div');
        panelTitle.classList.add('panel-title');
        panelTitle.innerHTML = '<span>üíñ</span> Manbo Downloader';
        panelHeader.appendChild(panelTitle);

        // N√∫t toggle n·ªôi b·ªô panel (thu g·ªçn/m·ªü r·ªông n·ªôi dung)
        const internalToggleButton = document.createElement('button');
        internalToggleButton.classList.add('toggle-button');
        internalToggleButton.innerHTML = '‚ñº'; // M≈©i t√™n xu·ªëng
        panelHeader.appendChild(internalToggleButton);

        // Th√¢n b·∫£ng ƒëi·ªÅu khi·ªÉn (n·ªôi dung c√≥ th·ªÉ thu g·ªçn)
        panelBodyElement = document.createElement('div'); // G√°n v√†o bi·∫øn to√†n c·ª•c
        panelBodyElement.classList.add('panel-body');
        panel.appendChild(panelBodyElement);

        // --- Ph·∫ßn ph·ª• ƒë·ªÅ ---
        const subtitleSectionTitle = document.createElement('div');
        subtitleSectionTitle.classList.add('panel-section-title');
        subtitleSectionTitle.innerHTML = '<i>üêæ</i> T·∫£i ph·ª• ƒë·ªÅ:'; // Bi·ªÉu t∆∞·ª£ng ƒë·ªïi th√†nh d·∫•u ch√¢n
        panelBodyElement.appendChild(subtitleSectionTitle);

        // Ph·ª• ƒë·ªÅ LRC (T·∫£i t·∫•t c·∫£) - Gi·∫£ s·ª≠ Lrc l√† lo·∫°i ph·ª• ƒë·ªÅ ch√≠nh cho Manbo
        const btnDownloadAllLRC = document.createElement('button');
        btnDownloadAllLRC.classList.add('download-option-btn');
        btnDownloadAllLRC.innerHTML = '<i></i> T·∫£i ph·ª• ƒë·ªÅ LRC (To√†n b·ªô Drama)';
        btnDownloadAllLRC.querySelector('i').classList.add('icon-json-srt'); // T√°i s·ª≠ d·ª•ng bi·ªÉu t∆∞·ª£ng cho t·∫£i ph·ª• ƒë·ªÅ chung
        panelBodyElement.appendChild(btnDownloadAllLRC);
        btnDownloadAllLRC.onclick = () => {
            if (subtitleData.length === 0) return Swal.fire('Kh√¥ng c√≥ d·ªØ li·ªáu ph·ª• ƒë·ªÅ', 'B·∫°n ƒë√£ v√†o trang chi ti·∫øt drama ch√≠nh ch∆∞a?', 'error');
            startZipSubtitles(subtitleData, currentDramaTitle, 'lrc');
        };

        // T·∫£i ph·ª• ƒë·ªÅ ASS (T·∫£i t·∫•t c·∫£) - N√∫t m·ªõi
        const btnDownloadAllASS = document.createElement('button');
        btnDownloadAllASS.classList.add('download-option-btn');
        btnDownloadAllASS.innerHTML = '<i></i> T·∫£i ph·ª• ƒë·ªÅ ASS (To√†n b·ªô Drama)';
        btnDownloadAllASS.querySelector('i').classList.add('icon-ass'); // S·ª≠ d·ª•ng icon-ass
        panelBodyElement.appendChild(btnDownloadAllASS);
        btnDownloadAllASS.onclick = () => {
            if (subtitleData.length === 0) return Swal.fire('Kh√¥ng c√≥ d·ªØ li·ªáu ph·ª• ƒë·ªÅ', 'B·∫°n ƒë√£ v√†o trang chi ti·∫øt drama ch√≠nh ch∆∞a?', 'error');
            startZipSubtitles(subtitleData, currentDramaTitle, 'ass');
        };

        // T·∫£i ph·ª• ƒë·ªÅ LRC t·∫≠p hi·ªán t·∫°i
        const btnDownloadCurrentEpisodeLRC = document.createElement('button');
        btnDownloadCurrentEpisodeLRC.classList.add('download-option-btn');
        btnDownloadCurrentEpisodeLRC.innerHTML = '<i></i> T·∫£i ph·ª• ƒë·ªÅ LRC (T·∫≠p hi·ªán t·∫°i)';
        btnDownloadCurrentEpisodeLRC.querySelector('i').classList.add('icon-lrc'); // S·ª≠ d·ª•ng icon-lrc cho ph·ª• ƒë·ªÅ ƒë∆°n
        panelBodyElement.appendChild(btnDownloadCurrentEpisodeLRC);
        btnDownloadCurrentEpisodeLRC.onclick = async () => {
            if (isDownloading) {
                return toast.fire({ title: 'ƒêang t·∫£i v·ªÅ, vui l√≤ng ch·ªù...', icon: 'warning' });
            }
            if (!currentEpisodeLrcUrl) {
                return Swal.fire('Kh√¥ng t√¨m th·∫•y ph·ª• ƒë·ªÅ LRC', 'H√£y ƒë·∫£m b·∫£o b·∫°n ƒëang ·ªü trang chi ti·∫øt c·ªßa m·ªôt t·∫≠p v√† ph·ª• ƒë·ªÅ ƒë√£ t·∫£i.', 'error');
            }
            isDownloading = true;
            toast.fire({ title: 'ƒêang t·∫£i ph·ª• ƒë·ªÅ LRC t·∫≠p hi·ªán t·∫°i...', icon: 'info' });
            try {
                const lrcText = await fetchFile(currentEpisodeLrcUrl, 'text');
                // S·ª≠ d·ª•ng currentEpisodeTitle v√† DramaTitle ƒë·ªÉ t·∫°o t√™n t·ªáp duy nh·∫•t v√† r√µ r√†ng
                const filename = `${sanitizeFilename(currentDramaTitle)}_${sanitizeFilename(currentEpisodeTitle)}.lrc`;
                downloadFile(new Blob([lrcText], { type: 'text/plain;charset=utf-8' }), filename);
                toast.fire({ title: 'T·∫£i ph·ª• ƒë·ªÅ LRC t·∫≠p hi·ªán t·∫°i ho√†n t·∫•t!', icon: 'success' });
            } catch (e) {
                toast.fire({ title: 'L·ªói khi t·∫£i ph·ª• ƒë·ªÅ LRC t·∫≠p hi·ªán t·∫°i.', icon: 'error', text: e.message });
            } finally {
                isDownloading = false;
            }
        };

        // T·∫£i ph·ª• ƒë·ªÅ ASS t·∫≠p hi·ªán t·∫°i
        const btnDownloadCurrentEpisodeASS = document.createElement('button');
        btnDownloadCurrentEpisodeASS.classList.add('download-option-btn');
        btnDownloadCurrentEpisodeASS.innerHTML = '<i></i> T·∫£i ph·ª• ƒë·ªÅ ASS (T·∫≠p hi·ªán t·∫°i)';
        btnDownloadCurrentEpisodeASS.querySelector('i').classList.add('icon-ass'); // S·ª≠ d·ª•ng icon-ass
        panelBodyElement.appendChild(btnDownloadCurrentEpisodeASS);
        btnDownloadCurrentEpisodeASS.onclick = async () => {
            if (isDownloading) {
                return toast.fire({ title: 'ƒêang t·∫£i v·ªÅ, vui l√≤ng ch·ªù...', icon: 'warning' });
            }
            if (!currentEpisodeLrcUrl) {
                return Swal.fire('Kh√¥ng t√¨m th·∫•y ph·ª• ƒë·ªÅ LRC ƒë·ªÉ chuy·ªÉn ƒë·ªïi', 'H√£y ƒë·∫£m b·∫£o b·∫°n ƒëang ·ªü trang chi ti·∫øt c·ªßa m·ªôt t·∫≠p v√† ph·ª• ƒë·ªÅ ƒë√£ t·∫£i.', 'error');
            }
            isDownloading = true;
            toast.fire({ title: 'ƒêang t·∫£i v√† chuy·ªÉn ƒë·ªïi ph·ª• ƒë·ªÅ ASS...', icon: 'info' });
            try {
                const lrcText = await fetchFile(currentEpisodeLrcUrl, 'text');
                const assText = convertLrcToAss(lrcText);
                const filename = `${sanitizeFilename(currentDramaTitle)}_${sanitizeFilename(currentEpisodeTitle)}.ass`;
                downloadFile(new Blob([assText], { type: 'text/plain;charset=utf-8' }), filename);
                toast.fire({ title: 'T·∫£i ph·ª• ƒë·ªÅ ASS t·∫≠p hi·ªán t·∫°i ho√†n t·∫•t!', icon: 'success' });
            } catch (e) {
                toast.fire({ title: 'L·ªói khi t·∫£i ho·∫∑c chuy·ªÉn ƒë·ªïi ph·ª• ƒë·ªÅ ASS.', icon: 'error', text: e.message });
            } finally {
                isDownloading = false;
            }
        };


        // --- Ph·∫ßn ·∫£nh ---
        const imageSectionTitle = document.createElement('div');
        imageSectionTitle.classList.add('panel-section-title');
        imageSectionTitle.innerHTML = '<i></i> T·∫£i ·∫£nh Drama:';
        imageSectionTitle.querySelector('i').classList.add('icon-all-images');
        panelBodyElement.appendChild(imageSectionTitle);

        // T·∫£i ·∫£nh t·∫≠p hi·ªán t·∫°i
        const btnDownloadCurrentEpisodeImages = document.createElement('button');
        btnDownloadCurrentEpisodeImages.classList.add('download-option-btn');
        btnDownloadCurrentEpisodeImages.innerHTML = '<i></i> T·∫£i ·∫£nh t·∫≠p hi·ªán t·∫°i';
        btnDownloadCurrentEpisodeImages.querySelector('i').classList.add('icon-single-image'); // Bi·ªÉu t∆∞·ª£ng m·ªõi
        panelBodyElement.appendChild(btnDownloadCurrentEpisodeImages);
        btnDownloadCurrentEpisodeImages.onclick = () => {
            updateCurrentEpisodeImageList(); // C·∫°o ·∫£nh DOM m·ªôt l·∫ßn n·ªØa ngay tr∆∞·ªõc khi h√†nh ƒë·ªông
            if (imageData.length === 0) return Swal.fire('Kh√¥ng t√¨m th·∫•y ·∫£nh', 'H√£y cu·ªôn trang ho·∫∑c ch·ªù t·∫£i API ƒë·ªÉ c√≥ th√™m ·∫£nh.', 'error');
            startZipImages(imageData, `${sanitizeFilename(currentDramaTitle)}_${sanitizeFilename(currentEpisodeTitle)}`);
        };

        // T·∫£i T·∫§T C·∫¢ ·∫£nh Drama (to√†n b·ªô c√°c t·∫≠p)
        const btnDownloadAllDramaImages = document.createElement('button');
        btnDownloadAllDramaImages.classList.add('download-option-btn');
        btnDownloadAllDramaImages.innerHTML = '<i></i> T·∫£i T·∫§T C·∫¢ ·∫£nh Drama';
        btnDownloadAllDramaImages.querySelector('i').classList.add('icon-all-images');
        panelBodyElement.appendChild(btnDownloadAllDramaImages);
        btnDownloadAllDramaImages.onclick = () => {
            if (allDramaImageData.length === 0) return Swal.fire('Kh√¥ng t√¨m th·∫•y ·∫£nh', 'Ch∆∞a c√≥ d·ªØ li·ªáu ·∫£nh cho to√†n b·ªô drama. H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ v√†o trang chi ti·∫øt drama ch√≠nh.', 'warning');
            startZipImages(allDramaImageData, `${sanitizeFilename(currentDramaTitle)}_All_Drama`);
        };


        // --- Ch·ª©c nƒÉng chuy·ªÉn ƒë·ªïi b·∫£ng ƒëi·ªÅu khi·ªÉn n·ªôi b·ªô (thu g·ªçn n·ªôi dung) ---
        internalToggleButton.addEventListener('click', () => {
            panelBodyElement.classList.toggle('collapsed'); // Ch·ªâ thu g·ªçn ph·∫ßn body
            internalToggleButton.innerHTML = panelBodyElement.classList.contains('collapsed') ? '‚ñ∫' : '‚ñº'; // Thay ƒë·ªïi m≈©i t√™n
            // Kh√¥ng c·∫ßn ƒëi·ªÅu ch·ªânh chi·ªÅu cao t·ªïng th·ªÉ c·ªßa panel khi ch·ªâ thu g·ªçn n·ªôi dung b√™n trong
        });

        // T·∫°o n√∫t ·∫©n/hi·ªán ch√≠nh (n√∫t n·ªïi ngo√†i c√πng)
        const mainToggleButton = document.createElement('button');
        mainToggleButton.id = 'manbo-downloader-toggle-main-button';
        mainToggleButton.innerHTML = 'üíñ'; // Bi·ªÉu t∆∞·ª£ng tr√°i tim ho·∫∑c m≈©i t√™n
        document.body.appendChild(mainToggleButton);

        mainToggleButton.addEventListener('click', () => {
            const panel = document.getElementById('manbo-downloader-panel');
            const isPanelCollapsed = panel.classList.toggle('collapsed');
            // C·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng n√∫t ch√≠nh
            mainToggleButton.innerHTML = isPanelCollapsed ? 'üíñ' : '‚ùå'; // V√≠ d·ª•: hi·ªán tr√°i tim khi ·∫©n, X khi hi·ªán
            // N·∫øu panel ƒë∆∞·ª£c hi·ªán l·∫°i, ƒëi·ªÅu ch·ªânh chi·ªÅu cao
            if (!isPanelCollapsed) {
                setTimeout(adjustPanelHeight, 300); // ƒê·∫£m b·∫£o transition CSS k·∫øt th√∫c
            }
        });

        adjustPanelHeight(); // ƒêi·ªÅu ch·ªânh chi·ªÅu cao ban ƒë·∫ßu khi panel ƒë∆∞·ª£c t·∫°o
    }

    // --- M√≥c API ƒë·ªÉ thu th·∫≠p d·ªØ li·ªáu ---
    ajaxHooker.hook(request => {
        // Ch·∫∑n c√°c ph·∫£n h·ªìi ƒë·ªÉ thu th·∫≠p d·ªØ li·ªáu ph·ª• ƒë·ªÅ v√† h√¨nh ·∫£nh
        request.response = res => {
            if (res.responseText) {
                try {
                    const data = JSON.parse(res.responseText);
                    let apiImageUrlsFromResponse = []; // T·∫°m th·ªùi l∆∞u tr·ªØ URL ·∫£nh t·ª´ ph·∫£n h·ªìi API n√†y

                    // Case 1: dramaSetDetail (chi ti·∫øt c·ªßa m·ªôt t·∫≠p c·ª• th·ªÉ) - v√≠ d·ª•: kilamanbo.com/web_manbo/dramaSetDetail
                    if (request.url.includes('dramaSetDetail')) {
                        const episodeData = data?.data;
                        if (episodeData) {
                            currentEpisodeLrcUrl = episodeData.setLrcUrl || null;
                            currentEpisodeTitle = episodeData.setTitle || episodeData.setName || 'T·∫≠p hi·ªán t·∫°i';
                            currentDramaTitle = episodeData.radioDramaResp?.title || currentDramaTitle;

                            const setList = episodeData.radioDramaResp?.setRespList || [];
                            // subtitleData: [ti√™u ƒë·ªÅ, lrcUrl, setIdStr]
                            subtitleData = setList.map(a => [a.subTitle || a.setTitle || a.setName, a.setLrcUrl, a.setIdStr]);

                            const uniqueAllImages = new Set();
                            setList.forEach(ep => {
                                if (ep.setPic) {
                                    uniqueAllImages.add(ep.setPic.replace(/\?.*/, ''));
                                }
                            });
                            if (episodeData.radioDramaResp?.coverPic) {
                                uniqueAllImages.add(episodeData.radioDramaResp.coverPic.replace(/\?.*/, ''));
                            }
                            allDramaImageData = Array.from(uniqueAllImages);

                            // L·∫•y ·∫£nh t·ª´ `picUrlSet` ho·∫∑c `backgroundImgUrl` cho t·∫≠p hi·ªán t·∫°i
                            if (episodeData.picUrlSet) {
                                apiImageUrlsFromResponse.push(...episodeData.picUrlSet);
                            }
                            if (episodeData.backgroundImgUrl) {
                                apiImageUrlsFromResponse.push(episodeData.backgroundImgUrl);
                            }
                        }
                    }
                    // Case 2: dramaDetail (trang drama ch√≠nh) - v√≠ d·ª•: kilamanbo.com/manbo/pc/detail
                    else if (request.url.includes('dramaDetail')) {
                        const radioDramaResp = data?.data?.radioDramaResp || data?.data;
                        const setList = radioDramaResp?.setRespList || [];
                        // subtitleData: [ti√™u ƒë·ªÅ, lrcUrl, setIdStr]
                        subtitleData = setList.map(a => [a.subTitle || a.setTitle || a.setName, a.setLrcUrl, a.setIdStr]);
                        currentDramaTitle = radioDramaResp?.title || 'Manbo';

                        currentEpisodeLrcUrl = null;
                        currentEpisodeTitle = 'T·∫≠p hi·ªán t·∫°i';

                        const uniqueAllImages = new Set();
                        setList.forEach(episode => {
                            if (episode.setPic) {
                                uniqueAllImages.add(episode.setPic.replace(/\?.*/, ''));
                            }
                        });
                        if (radioDramaResp?.coverPic) {
                            uniqueAllImages.add(radioDramaResp.coverPic.replace(/\?.*/, ''));
                        }
                        allDramaImageData = Array.from(uniqueAllImages);

                        // L·∫•y ·∫£nh t·ª´ `backgroundImgList` cho trang drama ch√≠nh
                        if (radioDramaResp?.backgroundImgList) {
                            apiImageUrlsFromResponse.push(...radioDramaResp.backgroundImgList.map(i => i.backPic));
                        }
                    }
                    // Case 3: kilamanbo.com/web_manbo/getBackground - API ri√™ng ƒë·ªÉ l·∫•y ·∫£nh cho t·∫≠p hi·ªán t·∫°i
                    else if (request.url.includes('web_manbo/getBackground') && data?.data?.backgroundImgList) {
                        apiImageUrlsFromResponse.push(...data.data.backgroundImgList.map(i => i.backPic));
                        console.log("ƒê√£ ph√°t hi·ªán ·∫£nh t·ª´ getBackground:", apiImageUrlsFromResponse);
                    }

                    // Sau khi x·ª≠ l√Ω t·∫•t c·∫£ c√°c lo·∫°i ph·∫£n h·ªìi API, c·∫≠p nh·∫≠t danh s√°ch ·∫£nh c·ªßa t·∫≠p hi·ªán t·∫°i
                    // Ch·ªâ th√™m c√°c URL h·ª£p l·ªá v√† lo·∫°i b·ªè c√°c tham s·ªë truy v·∫•n
                    const cleanApiUrls = apiImageUrlsFromResponse.filter(Boolean).map(url => url.replace(/\?.*/, ''));
                    if (cleanApiUrls.length > 0) {
                        updateCurrentEpisodeImageList(cleanApiUrls);
                    }

                    console.log("Ti√™u ƒë·ªÅ Drama hi·ªán t·∫°i:", currentDramaTitle);
                    console.log("Ti√™u ƒë·ªÅ t·∫≠p hi·ªán t·∫°i:", currentEpisodeTitle);
                    console.log("URL LRC t·∫≠p hi·ªán t·∫°i:", currentEpisodeLrcUrl);
                    console.log("D·ªØ li·ªáu ph·ª• ƒë·ªÅ (T·∫•t c·∫£ c√°c t·∫≠p):", subtitleData);
                    console.log("D·ªØ li·ªáu ·∫£nh to√†n b·ªô Drama:", allDramaImageData);

                } catch (e) {
                    console.error("Manbo Downloader: L·ªói ph√¢n t√≠ch JSON ho·∫∑c tr√≠ch xu·∫•t d·ªØ li·ªáu:", e);
                }
            }
        };
    });

    // --- Thi·∫øt l·∫≠p ban ƒë·∫ßu ---
    document.addEventListener('DOMContentLoaded', () => {
        // T·∫°o b·∫£ng ƒëi·ªÅu khi·ªÉn khi DOM ƒë√£ s·∫µn s√†ng
        createDownloaderPanel();

        // ƒê·∫£m b·∫£o n√∫t ·∫©n hi·ªán ch√≠nh ƒë∆∞·ª£c t·∫°o v√† panel ·∫©n ƒëi ban ƒë·∫ßu
        const mainToggleButton = document.getElementById('manbo-downloader-toggle-main-button');
        const panel = document.getElementById('manbo-downloader-panel');
        if (panel && mainToggleButton) {
            // ·∫®n panel ban ƒë·∫ßu v√† c·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng n√∫t
            panel.classList.add('collapsed');
            mainToggleButton.innerHTML = 'üíñ'; // Bi·ªÉu t∆∞·ª£ng ban ƒë·∫ßu khi ·∫©n
        }

        // Th·ª±c hi·ªán c·∫≠p nh·∫≠t danh s√°ch ·∫£nh ban ƒë·∫ßu cho t·∫≠p hi·ªán t·∫°i sau khi DOM s·∫µn s√†ng
        // ƒêi·ªÅu n√†y s·∫Ω thu th·∫≠p c√°c ·∫£nh t·ª´ DOM khi trang v·ª´a t·∫£i.
        updateCurrentEpisodeImageList();

        // L·∫Øng nghe s·ª± ki·ªán resize c·ªßa c·ª≠a s·ªï ƒë·ªÉ ƒëi·ªÅu ch·ªânh chi·ªÅu cao panel
        window.addEventListener('resize', adjustPanelHeight);

        // Thi·∫øt l·∫≠p MutationObserver ƒë·ªÉ b·∫Øt c√°c ·∫£nh ƒë∆∞·ª£c t·∫£i ƒë·ªông cho t·∫≠p hi·ªán t·∫°i
        const observer = new MutationObserver((mutationsList, observer) => {
            for (const mutation of mutationsList) {
                // Ki·ªÉm tra xem c√≥ node m·ªõi n√†o ƒë∆∞·ª£c th√™m v√†o DOM kh√¥ng
                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                    // N·∫øu c√≥, ch·∫°y l·∫°i updateCurrentEpisodeImageList ƒë·ªÉ n·∫Øm b·∫Øt c√°c ·∫£nh DOM m·ªõi
                    // v√† ƒë·∫£m b·∫£o c√°c ·∫£nh t·ª´ API (n·∫øu ƒë√£ ƒë∆∞·ª£c th√™m v√†o `imageData` tr∆∞·ªõc ƒë√≥) v·∫´n c√≤n.
                    updateCurrentEpisodeImageList();
                }
            }
        });

        // Quan s√°t body ƒë·ªÉ t√¨m c√°c thay ƒë·ªïi (v√≠ d·ª•: c√°c ph·∫ßn t·ª≠ m·ªõi ƒë∆∞·ª£c th√™m v√†o)
        // C·∫ßn quan s√°t c·∫£ `subtree` ƒë·ªÉ b·∫Øt c√°c thay ƒë·ªïi s√¢u trong DOM.
        observer.observe(document.body, { childList: true, subtree: true });

        // Fallback ƒë·ªÉ n·∫Øm b·∫Øt b·∫•t k·ª≥ ·∫£nh c√≤n l·∫°i n√†o t·ª´ DOM sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
        // ƒêi·ªÅu n√†y gi√∫p √≠ch cho c√°c ph·∫ßn t·ª≠ c√≥ th·ªÉ t·∫£i mu·ªôn h∆°n m·ªôt ch√∫t sau khi DOM s·∫µn s√†ng ban ƒë·∫ßu,
        // ho·∫∑c n·∫øu m·ªôt s·ªë API b·ªã b·ªè l·ª°.
        setTimeout(() => {
            updateCurrentEpisodeImageList();
        }, 1500);
    });

})();
